{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Which semantics should I use?","text":"<p>Common code implementation and patterns in multiple programming languages. A work in progress.</p>"},{"location":"definitions/classes/","title":"Classes","text":""},{"location":"definitions/classes/#objects","title":"Objects","text":""},{"location":"definitions/classes/#classes","title":"Classes","text":"JavaGroovyKotlinPythonJavaScriptTypeScript <pre><code>class Class {\n    Object member = new Object();\n}\n</code></pre> <pre><code>class Class {\n    var member = new Object()\n}\n</code></pre> <pre><code>class Class {\n    val member = Any()\n}\n\nobject Object {\n    const val member = 0\n}\n</code></pre> <pre><code>class Class:\n    def __init__(self):\n        self.member = object()\n</code></pre> <pre><code>class Class {\n    let member = {};\n}\n</code></pre> <pre><code>class Class {\n    let member: any = {};\n}\n</code></pre>"},{"location":"definitions/classes/#interfaces","title":"Interfaces","text":"JavaGroovyKotlinPython <pre><code>interface Interface {\n    void method();\n}\n</code></pre> <pre><code>interface Interface {\n    void method()\n}\n</code></pre> <pre><code>interface Interface {\n    fun method()\n}\n</code></pre> <pre><code>from abc import *\n\nclass Interface(ABC):\n    @abstractmethod\n    def method(self):\n        pass\n</code></pre>"},{"location":"definitions/classes/#enumerations","title":"Enumerations","text":"JavaGroovyKotlinPython <pre><code>enum Enumeration {\n    ONE, TWO, THREE\n}\n</code></pre> <pre><code>enum Enumeration {\n    ONE, TWO, THREE\n}\n</code></pre> <pre><code>enum class Enumeration {\n    ONE, TWO, THREE\n}\n</code></pre> <pre><code>from enum import *\n\nclass Enumeration(Enum):\n    ONE = 1\n    TWO = 2\n    THREE = 3\n</code></pre>"},{"location":"definitions/classes/#overriding","title":"Overriding","text":""},{"location":"definitions/classes/#text-representation","title":"Text representation","text":"JavaGroovyKotlinPythonJavaScriptTypeScript <pre><code>class Class {\n    @Override\n    public String toString() {\n        return \"Hello\";\n    }\n}\n\n// usage\nString text = String.format(\"%s World\", new Class());\n</code></pre> <pre><code>class Class {\n    @Override\n    String toString() { 'Hello' }\n}\n\n// usage\nvar text = \"${new Class()} World\"\n</code></pre> <pre><code>class Class {\n    override fun toString() = \"Hello\"\n}\n\n// usage\nval text = \"${new Class()} World\"\n</code></pre> <pre><code>class Class:\n    def __str__(self):\n        return 'Hello'\n\n# usage\ntext = f'{Class()} World'\n</code></pre> <pre><code>class Class {\n    toString() {\n        return 'Hello';\n    }\n}\n\n// usage\nlet text = `${new Class()} World`;\n</code></pre> <pre><code>class Class {\n    toString(): string {\n        return 'Hello';\n    }\n}\n\n// usage\nlet text: string = `${new Class()} World`;\n</code></pre>"},{"location":"definitions/classes/#equality","title":"Equality","text":"JavaGroovyKotlinPythonJavaScriptTypeScript <pre><code>class Class {\n    @Override\n    public boolean equals(Object other) {\n        return true;\n    }\n\n    @Override\n    public int hashCode() {\n        return 0;\n    }\n}\n\n// usage\nboolean isEqual = new Class().equals(new Class());\n</code></pre> <pre><code>class Class {\n    @Override\n    boolean equals(Object other) { true }\n\n    @Override\n    int hashCode() { 0 }\n}\n\n// usage\nvar isEqual = new Class().equals(new Class())\n</code></pre> <pre><code>class Class {\n    override fun equals(other: Any) = true\n\n    override fun hashCode() = 0\n}\n\n// usage\nval isEqual = Class() == Class()\n</code></pre> <pre><code>class Class:\n    def __eq__(self, other):\n        return True\n\n    def __hash__(self):\n        return 0\n\n# usage\nis_equal = Class() == Class()\n</code></pre> <pre><code>class Class {\n    equals(other) {\n        return true;\n    }\n\n    hashCode() {\n        return 0;\n    }\n}\n\n// usage\nlet isEqual = new Class().equals(new Class());\n</code></pre> <pre><code>class Class {\n    equals(other: any): boolean {\n        return true;\n    }\n\n    hashCode(): number {\n        return 0;\n    }\n}\n\n// usage\nlet isEqual: boolean = new Class().equals(new Class());\n</code></pre>"},{"location":"definitions/classes/#comparison","title":"Comparison","text":"JavaGroovyKotlinPythonJavaScriptTypeScript <pre><code>class Class implements Comparable&lt;Class&gt; {\n    int number = 0;\n\n    @Override\n    public int compareTo(Class other) {\n        return Integer.compare(number, other.number);\n    }\n}\n\n// usage\nboolean isLesser = new Class().compareTo(new Class()) &lt; 0;\nboolean isGreater = new Class().compareTo(new Class()) &gt; 0;\n</code></pre> <pre><code>class Class implements Comparable&lt;Class&gt; {\n    int number = 0\n\n    @Override\n    int compareTo(Class other) { Integer.compare(number, other.number) }\n}\n\n// usage\nboolean isLesser = new Class().compareTo(new Class()) &lt; 0\nboolean isGreater = new Class().compareTo(new Class()) &gt; 0\n</code></pre> <pre><code>class Class : Comparable&lt;Class&gt; {\n    var number = 0\n\n    override fun compareTo(other: Class) = number.compareTo(other.number)\n}\n\n// usage\nval isLesser = Class() &lt; Class()\nval isGreater = Class() &gt; Class()\n</code></pre> <pre><code>class Class:\n    def __init__(self):\n        self.number = 0\n\n    def __lt__(self, other):\n        return self.number &lt; other.number\n\n    def __gt__(self, other):\n        return self.number &gt; other.number\n\n# usage\nis_lesser = Class() &lt; Class()\nis_greater = Class() &gt; Class()\n</code></pre> <pre><code>class Class {\n    number = 0;\n\n    compareTo(other) {\n        return this.number - other.number;\n    }\n}\n\n// usage\nlet isLesser = new Class().compareTo(new Class()) &lt; 0;\nlet isGreater = new Class().compareTo(new Class()) &gt; 0;\n</code></pre> <pre><code>class Class {\n    number: number = 0;\n\n    compareTo(other: Class): number {\n        return this.number - other.number;\n    }\n}\n\n// usage\nlet isLesser: boolean = new Class().compareTo(new Class()) &lt; 0;\nlet isGreater: boolean = new Class().compareTo(new Class()) &gt; 0;\n</code></pre>"},{"location":"definitions/functions/","title":"Functions","text":""},{"location":"definitions/functions/#methods","title":"Methods","text":"JavaGroovyKotlinPython <pre><code>void method(Object param) {\n    System.out.println(param);\n}\n</code></pre> <pre><code>def method(var param) { println param }\n\ndef multilineMethod(var param) {\n    println param\n    println param\n}\n</code></pre> <pre><code>fun method(param: Any) = println(param)\n\nfun multilineMethod(param: Any) {\n    println(param)\n    println(param)\n}\n\nvar Any.variableMethod\n    get() = \"Hello\"\n    set(value) {\n        println(value)\n        println(value)\n    }\n</code></pre> <pre><code>def method(param):\n    print(param)\n</code></pre>"},{"location":"definitions/functions/#static-modifier","title":"Static modifier","text":"JavaGroovyKotlinPython <pre><code>static void method(Object param) {\n    System.out.println(param);\n}\n</code></pre> <pre><code>static def method(var param) { println param }\n</code></pre> <pre><code>companion object {\n    fun method(param: Any) = println(param)\n}\n</code></pre> <pre><code>from typing import *\n\n@staticmethod\ndef method(param):\n    print(param)\n</code></pre>"},{"location":"definitions/functions/#lambdas","title":"Lambdas","text":"<p>Lambdas are higher-order functional types passed as arguments.</p> GroovyKotlin <pre><code>Closure listener = { param -&gt; println(param) }\n\nClosure multilineListener = { param -&gt;\n    println(param)\n    println(param)\n}\n</code></pre> <pre><code>val listener: (Any) -&gt; Unit = { e -&gt; println(param) }\n\nval multilineListener: (Any) -&gt; Unit = { param -&gt;\n    println(param)\n    println(param)\n}\n</code></pre>"},{"location":"definitions/functions/#sam-conversions","title":"SAM conversions","text":"JavaGroovyKotlin <pre><code>interface Lambda {\n    void call(Object param);\n}\n\nLambda lambda = param -&gt; System.out.println(param);\nLambda multilineLambda = param -&gt; {\n    System.out.println(param);\n    System.out.println(param);\n};\n</code></pre> <pre><code>interface Lambda {\n    void call(var param)\n}\n\nLambda lambda = { param -&gt; println param }\nLambda multilineLambda = { param -&gt;\n    println param\n    println param\n}\n</code></pre> <pre><code>fun interface Lambda {\n    fun call(param: Any)\n}\n\nval lambda = Lambda { param -&gt; println(param) }\nval multilineLambda =\n    Lambda { param -&gt;\n        println(param)\n        println(param)\n    }\n</code></pre>"},{"location":"definitions/variables/","title":"Variables","text":""},{"location":"definitions/variables/#primitives","title":"Primitives","text":""},{"location":"definitions/variables/#numbers","title":"Numbers","text":"JavaGroovyKotlinPythonJavaScriptTypeScript <pre><code>import java.math.*;\n\nint intNumber = 0;\nshort shortNumber = 0;\nlong longNumber = 0L;\ndouble doubleDecimal = 0.0;\nfloat floatDecimal = 0.0f;\n\nInteger boxedIntNumber = 0;\nShort boxedShortNumber = 0;\nLong boxedLongNumber = 0L;\nDouble boxedDoubleDecimal = 0.0;\nFloat boxedFloatDecimal = 0.0f;\n\nBigInteger bigNumber = BigInteger.valueOf(0);\nBigDecimal bigDecimal = BigDecimal.valueOf(0.0);\n</code></pre> <pre><code>var intNumber = 0\nshort shortNumber = 0\nvar longNumber = 0L\n\nvar doubleDecimal = 0.0d\nvar floatDecimal = 0.0f\n\nvar bigNumber = 0.toBigInteger()\nvar bigDecimal = 0.0.toBigDecimal()\n</code></pre> <pre><code>val intNumber = 0\nval shortNumber: Short = 0\nval longNumber = 0L\n\nval doubleDecimal = 0.0\nval floatDecimal = 0.0f\n\nval bigNumber = 0.toBigInteger()\nval bigDecimal = 0.0.toBigDecimal()\n</code></pre> <pre><code>from decimal import *\n\nnumber = 0\n\ndecimal = 0.0\n\nbig_decimal = Decimal(0.0)\n</code></pre> <pre><code>let number = 0;\n\nlet decimal = 0.0;\n\nlet bigNumber = BigInt(0);\n</code></pre> <pre><code>let number: number = 0;\n\nlet decimal: number = 0.0;\n\nlet bigNumber: bigint = 0n;\n</code></pre>"},{"location":"definitions/variables/#text-conversion","title":"Text conversion","text":"JavaGroovyKotlinPythonJavaScriptTypeScript <pre><code>import java.math.*;\n\nint intNumber = Integer.parseInt(\"0\");\nshort shortNumber = Short.parseShort(\"0\");\nlong longNumber = Long.parseLong(\"0\");\ndouble doubleDecimal = Double.parseDouble(\"0.0\");\nfloat floatDecimal = Float.parseFloat(\"0.0\");\n\nInteger boxedIntNumber = Integer.valueOf(\"0\");\nShort boxedShortNumber = Short.valueOf(\"0\");\nLong boxedLongNumber = Long.valueOf(\"0\");\nDouble boxedDoubleDecimal = Double.valueOf(\"0.0\");\nFloat boxedFloatDecimal = Float.valueOf(\"0.0\");\n\nBigInteger bigNumber = new BigInteger(\"0\");\nBigDecimal bigDecimal = new BigDecimal(\"0.0\");\n</code></pre> <pre><code>var intNumber = '0'.toInteger()\nvar shortNumber = '0'.toShort()\nvar longNumber = '0'.toLong()\n\nvar doubleDecimal = Double.parseDouble('0.0')\nvar floatDecimal = Float.parseFloat('0.0')\n\nvar bigNumber = '0'.toBigInteger()\nvar bigDecimal = '0.0'.toBigDecimal()\n</code></pre> <pre><code>val intNumber = \"0\".toInt()\nval shortNumber = \"0\".toShort()\nval longNumber = \"0\".toLong()\n\nval doubleDecimal = \"0.0\".toDouble()\nval floatDecimal = \"0.0\".toFloat()\n\nval bigNumber = \"0\".toBigInteger()\nval bigDecimal = \"0.0\".toBigDecimal()\n</code></pre> <pre><code>from decimal import *\n\nnumber = int('0')\n\ndecimal = float('0.0')\n\nbig_decimal = Decimal('0.0')\n</code></pre> <pre><code>let number = parseInt('0');\n\nlet decimal = parseFloat('0.0');\n\nlet bigNumber = BigInt('0');\n</code></pre> <pre><code>let number: number = parseInt('0');\n\nlet decimal: number = parseFloat('0.0');\n\nlet bigNumber: bigint = BigInt('0');\n</code></pre>"},{"location":"definitions/variables/#text","title":"Text","text":"<p>JS and TS support multiline strings, but can't strip indentation.</p> JavaGroovyKotlinPythonJavaScriptTypeScript <pre><code>char character = 'a';\n\nCharacter boxedCharacter = 'a';\n\nString string = \"Hello\";\n\nString multilineString =\n    \"\"\"\n    Hello\n    World\n    \"\"\";\n</code></pre> <pre><code>char character = 'a'\n\nvar string = 'Hello'\n\nvar multilineString =\n    '''\n    Hello\n    World\n    '''.stripIndent().trim()\n</code></pre> <pre><code>val character = 'a'\n\nval string = \"Hello\"\n\nval multilineString =\n    \"\"\"\n    Hello\n    World\n    \"\"\".trimIndent()\n</code></pre> <pre><code>from textwrap import *\n\nstring = 'Hello'\n\nmultiline_string = \\\n    dedent(\n        '''\n        Hello\n        World\n        ''',\n    ).strip()\n</code></pre> <pre><code>let string = 'Hello';\n</code></pre> <pre><code>let string: string = 'Hello';\n</code></pre>"},{"location":"definitions/variables/#interpolation","title":"Interpolation","text":"JavaGroovyKotlinPythonJavaScriptTypeScript <pre><code>String lastName = \"Simpson\";\nString interpolatedString = String.format(\"%s, %s\", lastName, \"Homer\");\n</code></pre> <pre><code>var lastName = 'Simpson'\nvar interpolatedString = \"$lastName, ${'Homer'}\"\n</code></pre> <pre><code>val lastName = \"Simpson\"\nval interpolatedString = \"$lastName, ${\"Homer\"}\"\n</code></pre> <pre><code>last_name = 'Simpson'\ninterpolated_string = f'{last_name}, {'Homer'}'\n</code></pre> <pre><code>let lastName = 'Simpson';\nlet interpolatedString = `${lastName}, ${'Homer'}`;\n</code></pre> <pre><code>let lastName: string = 'Simpson';\nlet interpolatedString: string = `${lastName}, ${'Homer'}`;\n</code></pre>"},{"location":"definitions/variables/#collections","title":"Collections","text":""},{"location":"definitions/variables/#array","title":"Array","text":"<p>Without explicit type, Groovy arrays are translated into <code>List</code>.</p> JavaGroovyKotlinPythonJavaScriptTypeScript <pre><code>int[] intNumberArray = {1, 2, 3};\nshort[] shortNumberArray = {1, 2, 3};\nlong[] longNumberArray = {1L, 2L, 3L};\ndouble[] doubleDecimalArray = {1.0, 2.0, 3.0};\nfloat[] floatDecimalArray = {1.0f, 2.0f, 3.0f};\nchar[] characterArray = {'a', 'b', 'c'};\nObject[] array = {new Object(), new Object(), new Object()};\n</code></pre> <pre><code>int[] intNumberArray = [1, 2, 3]\nshort[] shortNumberArray = [1, 2, 3]\nlong[] longNumberArray = [1L, 2L, 3L]\ndouble[] doubleDecimalArray = [1.0, 2.0, 3.0]\nfloat[] floatDecimalArray = [1.0f, 2.0f, 3.0f]\nchar[] characterArray = ['a', 'b', 'c']\nObject[] array = [new Object(), new Object(), new Object()]\n</code></pre> <pre><code>val intNumberArray = intArrayOf(1, 2, 3)\nval shortNumberArray = shortArrayOf(1, 2, 3)\nval longNumberArray = longArrayOf(1L, 2L, 3L)\nval doubleDecimalArray = doubleArrayOf(1.0, 2.0, 3.0)\nval floatDecimalArray = floatArrayOf(1.0f, 2.0f, 3.0f)\nval characterArray = charArrayOf('a', 'b', 'c')\nval array = arrayOf(Any(), Any(), Any())\n</code></pre> <pre><code>from array import *\n\nint_number_array = array('i', [1, 2, 3])\nshort_number_array = array('h', [1, 2, 3])\nlong_number_array = array('q', [1, 2, 3])\ndouble_decimal_array = array('d', [1.0, 2.0, 3.0])\nfloat_decimal_array = array('f', [1.0, 2.0, 3.0])\ncharacter_array = array('u', 'abc')\narray = [object(), object(), object()]\n</code></pre> <pre><code>let number_array = [1, 2, 3];\nlet array = [{}, {}, {}];\n</code></pre> <pre><code>let number_array: number[] = [1, 2, 3];\nlet array: object[] = [{}, {}, {}];\n</code></pre>"},{"location":"definitions/variables/#lists","title":"Lists","text":"JavaGroovyKotlinPython <pre><code>List&lt;Object&gt; singletonList = Collections.singletonList(new Object());\n\nList&lt;Object&gt; immutableList =\n    Collections.unmodifiableList(\n        Arrays.asList(\n            new Object(),\n            new Object(),\n            new Object()\n        )\n    );\n\nList&lt;Object&gt; mutableList = new ArrayList&lt;&gt;();\nl.add(new Object());\nl.add(new Object());\nl.add(new Object());\n</code></pre> <pre><code>var singletonList = Collections.singletonList(new Object())\n\nvar immutableList = [\n    new Object(),\n    new Object(),\n    new Object(),\n].asImmutable()\n\nvar mutableList = [\n    new Object(),\n    new Object(),\n    new Object(),\n]\n</code></pre> <pre><code>val singletonList = listOf&lt;Object&gt;(Any())\n\nval immutableList =\n    listOf&lt;Object&gt;(\n        Any(),\n        Any(),\n        Any(),\n    )\n\nval mutableList =\n    mutableListOf&lt;Object&gt;(\n        Any(),\n        Any(),\n        Any(),\n    )\n</code></pre> <pre><code>immutable_list = (\n    object(),\n    object(),\n    object(),\n)\n\nmutable_list = [\n    object(),\n    object(),\n    object(),\n]\n</code></pre>"},{"location":"definitions/variables/#sets","title":"Sets","text":"JavaGroovyKotlinPython <pre><code>Set&lt;Object&gt; singletonList = Collections.singleton(new Object());\n\nSet&lt;Object&gt; immutableList =\n    Collections.unmodifiableSet(\n        new HashSet&lt;&gt;(\n            Arrays.asList(\n                new Object(),\n                new Object(),\n                new Object()\n            )\n        )\n    );\n\nSet&lt;Object&gt; mutableList = new HashSet&lt;&gt;();\ns.add(new Object());\ns.add(new Object());\ns.add(new Object());\n</code></pre> <pre><code>var singletonList = Collections.singleton(new Object())\n\nvar immutableList = [\n    new Object(),\n    new Object(),\n    new Object(),\n].toSet().asImutable()\n\nvar mutableList = [\n    new Object(),\n    new Object(),\n    new Object(),\n].toSet()\n</code></pre> <pre><code>val singletonList = setOf(Any())\n\nval immutableList =\n    setOf(\n        Any(),\n        Any(),\n        Any(),\n    )\n\nval mutableList =\n    mutableSetOf(\n        Any(),\n        Any(),\n        Any(),\n    )\n</code></pre> <pre><code>immutable_set = \\\n    fronzenset(\n        {\n            object(),\n            object(),\n            object(),\n        },\n    )\n\nmutable_set = {\n    object(),\n    object(),\n    object(),\n}\n</code></pre>"},{"location":"definitions/variables/#maps","title":"Maps","text":"JavaGroovyKotlinPython <pre><code>Map&lt;Object, Object&gt; singletonMap =\n    Collections.singletonMap(\n        new Object(),\n        new Object()\n    );\n\nMap&lt;Object, Object&gt; immutableMap = new HashMap&lt;&gt;();\nm2.put(new Object(), new Object());\nm2.put(new Object(), new Object());\nm2.put(new Object(), new Object());\nm2 = Collections.unmodifiableMap(m2);\n\nMap&lt;Object, Object&gt; mutableMap = new HashMap&lt;&gt;();\nm3.put(new Object(), new Object());\nm3.put(new Object(), new Object());\nm3.put(new Object(), new Object());\n</code></pre> <pre><code>var singletonMap =\n    Collections.singletonMap(\n        new Object(),\n        new Object(),\n    )\n\nvar mutableMap = [\n    new Object(): new Object(),\n    new Object(): new Object(),\n    new Object(): new Object(),\n].asImmutable()\n\nvar immutableMap = [\n    new Object(): new Object(),\n    new Object(): new Object(),\n    new Object(): new Object(),\n]\n</code></pre> <pre><code>val singletonMap = mapOf(Any() to Any())\n\nval immutableMap =\n    mapOf(\n        Any() to Any(),\n        Any() to Any(),\n        Any() to Any(),\n    )\n\nval mutableMap =\n    mutableMapOf(\n        Any() to Any(),\n        Any() to Any(),\n        Any() to Any(),\n    )\n</code></pre> <pre><code>mutable_map = {\n    object(): object(),\n    object(): object(),\n    object(): object(),\n}\n</code></pre>"},{"location":"logic/control_flows/","title":"Control flows","text":""},{"location":"logic/control_flows/#conditional","title":"Conditional","text":""},{"location":"logic/control_flows/#if-else","title":"If-else","text":"JavaGroovyKotlinPythonJavaScriptTypeScript <pre><code>if (firstCondition) {\n    System.out.println(\"First\");\n} else if (secondCondition) {\n    System.out.println(\"Second\");\n} else {\n    System.out.println(\"Third\");\n}\n\nboolean get() {\n    return firstCondition\n        ? firstValue\n        : secondValue;\n}\n</code></pre> <pre><code>if (firstCondition) {\n    println 'First'\n} else if (secondCondition) {\n    println 'Second'\n} else {\n    println 'Third'\n}\n\ndef get() {\n    return firstCondition\n        ? firstValue\n        : secondValue\n}\n</code></pre> <pre><code>if (firstCondition) {\n    println(\"First\")\n} else if (secondCondition) {\n    println(\"Second\")\n} else {\n    println(\"Third\")\n}\n\nfun get() = if (firstCondition) firstValue else secondValue\n</code></pre> <pre><code>if first_condition:\n    print('First')\nelif second_condition:\n    print('Second')\nelse:\n    print('Third')\n\ndef get():\n    return first_value if first_condition else second_value\n</code></pre> <pre><code>if (firstCondition) {\n    console.log('First');\n} else if (secondCondition) {\n    console.log('Second');\n} else {\n    console.log('Third');\n}\n\nfunction get() {\n    return firstCondition\n        ? firstValue\n        : secondValue;\n}\n</code></pre> <pre><code>if (firstCondition) {\n    console.log('First');\n} else if (secondCondition) {\n    console.log('Second');\n} else {\n    console.log('Third');\n}\n\nfunction get() {\n    return firstCondition\n        ? firstValue\n        : secondValue;\n}\n</code></pre>"},{"location":"logic/control_flows/#switch-case","title":"Switch-case","text":"JavaGroovyKotlinPythonJavaScriptTypeScript <pre><code>switch (value) {\n    case firstValue:\n        System.out.println(\"First\");\n        break;\n    case secondValue:\n        System.out.println(\"Second\");\n        break;\n    default:\n        System.out.println(\"Third\");\n        break;\n}\n</code></pre> <pre><code>switch (value) {\n    case firstValue:\n        println 'First'\n        break\n    case secondValue:\n        println 'Second'\n        break\n    default:\n        println 'Third'\n        break\n}\n</code></pre> <pre><code>when (value) {\n    firstValue -&gt; // ...\n    secondValue -&gt; // ...\n    else -&gt; {\n        // ...\n    }\n}\n\nfun get() =\n    when (value) {\n        firstValue -&gt; // ...\n        secondValue -&gt; // ...\n        else -&gt; {\n            // ...\n        }\n    }\n</code></pre> <pre><code>match value:\n    case first_value:\n        print('First')\n    case second_value:\n        print('Second')\n    case _:\n        print('Third')\n</code></pre> <pre><code>switch (value) {\n    case firstValue:\n        console.log('First');\n        break;\n    case secondValue:\n        console.log('Second');\n        break;\n    default:\n        console.log('Third');\n        break;\n}\n</code></pre> <pre><code>switch (value) {\n    case firstValue:\n        console.log('First');\n        break;\n    case secondValue:\n        console.log('Second');\n        break;\n    default:\n        console.log('Third');\n        break;\n}\n</code></pre>"},{"location":"logic/control_flows/#loops","title":"Loops","text":""},{"location":"logic/control_flows/#for","title":"For","text":"JavaGroovyKotlinPythonJavaScriptTypeScript <pre><code>for (int i = 0; i &lt; 10; i++) {\n    System.out.println(i);\n}\n\nfor (Object o : objects) {\n    System.out.println(o);\n}\n</code></pre> <pre><code>for (i in 0..9) {\n    println i\n}\n\nfor (var o in objects) {\n    println o\n}\n</code></pre> <pre><code>for (i in 0 until 10) {\n    println(i)\n}\n\nfor (o in objects) {\n    println(o)\n}\n</code></pre> <pre><code>for i in range(10):\n    print(i)\n\nfor i, o in enumerate(objects):\n    print(o)\n</code></pre> <pre><code>for (let i = 0; i &lt; 10; i++) {\n    console.log(i);\n}\n\nfor (const o of objects) {\n    console.log(o);\n}\n</code></pre> <pre><code>for (let i = 0; i &lt; 10; i++) {\n    console.log(i);\n}\n\nfor (const o of objects) {\n    console.log(o);\n}\n</code></pre>"},{"location":"logic/control_flows/#while","title":"While","text":"JavaGroovyKotlinPythonJavaScriptTypeScript <pre><code>while (condition) {\n    System.out.println(\"Hello\");\n}\n\ndo {\n    System.out.println(\"World\");\n} while (condition);\n</code></pre> <pre><code>while (condition) {\n    println 'Hello'\n}\n\ndo {\n    println 'World'\n} while (condition)\n</code></pre> <pre><code>while (condition) {\n    println(\"Hello\")\n}\n\ndo {\n    println(\"World\")\n} while (condition)\n</code></pre> <pre><code>while condition:\n    print('Hello')\n</code></pre> <pre><code>while (condition) {\n    console.log('Hello');\n}\n\ndo {\n    console.log('World');\n} while (condition);\n</code></pre> <pre><code>while (condition) {\n    console.log('Hello');\n}\n\ndo {\n    console.log('World');\n} while (condition);\n</code></pre>"},{"location":"logic/control_flows/#try-catch","title":"Try-catch","text":"JavaGroovyKotlinPythonJavaScriptTypeScript <pre><code>try {\n    throw new Exception(\"Oops\");\n} catch (Exception e) {\n    e.printStackTrace();\n} finally {\n    // ...\n}\n</code></pre> <pre><code>try {\n    throw new Exception('Oops')\n} catch (Exception e) {\n    e.printStackTrace()\n} finally {\n    // ...\n}\n</code></pre> <pre><code>try {\n    error(\"Oops\")\n} catch (e: Exception) {\n    e.printStackTrace()\n} finally {\n    // ...\n}\n</code></pre> <pre><code>try:\n    raise Exception('Oops')\nexcept Exception as e:\n    print(e)\nfinally:\n    # ...\n</code></pre> <pre><code>try {\n    throw new Error('Oops');\n} catch (e) {\n    console.error(e);\n} finally {\n    // ...\n}\n</code></pre> <pre><code>try {\n    throw new Error('Oops');\n} catch (e) {\n    console.error(e);\n} finally {\n    // ...\n}\n</code></pre>"},{"location":"logic/imports/","title":"Imports","text":"JavaGroovyKotlinPythonJavaScriptTypeScript <pre><code>import java.util.ArrayList;\n\nimport static java.util.Collections.emptyList;\n</code></pre> <pre><code>import java.util.ArrayList\n\nimport static java.util.Collections.emptyList\n</code></pre> <pre><code>import java.util.ArrayList\n</code></pre> <pre><code>import typing\n\nfrom typing import List\n</code></pre> <pre><code>// commonjs\nconst { member } = require('module');\nconst defaultMember = require('module');\n\n// module\nimport { member } from 'module';\nimport defaultMember from 'module';\n</code></pre> <pre><code>// commonjs\nconst { member } = require('module');\nconst defaultMember = require('module');\n\n// module\nimport { member } from 'module';\nimport defaultMember from 'module';\n</code></pre>"},{"location":"tricks/slicing/","title":"Slicing","text":""},{"location":"tricks/slicing/#collections","title":"Collections","text":"JavaGroovyKotlinPythonJavaScriptTypeScript <pre><code>Object[] subArray = Arrays.copyOfRange(array, start, end);\nList&lt;Object&gt; subList = list.subList(start, end);\n</code></pre> <pre><code>var subArray = arrayOrList[start..&lt;end]\n</code></pre> <pre><code>val subArray = array.sliceArray(start until end)\nval subList = list.subList(start, end)\n</code></pre> <pre><code>sub_array = array[start:end]\n</code></pre> <pre><code>let subArray = array.slice(start, end);\n</code></pre> <pre><code>let subArray: any[] = array.slice(start, end);\n</code></pre>"},{"location":"tricks/slicing/#string","title":"String","text":"JavaGroovyKotlinPythonJavaScriptTypeScript <pre><code>String subString = string.substring(start, end);\n\nString subStringBefore = string.substring(0, string.indexOf(\"World\"));\nString subStringBeforeLast = string.substring(0, string.lastIndexOf(\"World\"));\n\nString subStringAfter = string.substring(string.indexOf(\"Hello\") + \"Hello\".length());\nString subStringAfterLast = string.substring(string.lastIndexOf(\"Hello\") + \"Hello\".length());\n</code></pre> <pre><code>var subString = string[start..&lt;end]\n\nvar subStringBefore = string[0..&lt;string.indexOf('World')]\nvar subStringBeforeLast = string[0..&lt;string.lastIndexOf('World')]\n\nvar subStringAfter = string[string.indexOf('Hello') + 'Hello'.length()..-1]\nvar subStringAfterLast = string[string.lastIndexOf('Hello') + 'Hello'.length()..-1]\n</code></pre> <pre><code>val subString = string.substring(start, end)\n\nval subStringBefore = string.substringAfter(\"World\")\nval subStringBeforeLast = string.substringBeforeLast(\"World\")\n\nval subStringAfter = string.substringBefore(\"Hello\")\nval subStringAfterLast = string.substringAfterLast(\"Hello\")\n</code></pre> <pre><code>sub_string = string[start:end]\n\nsub_string_before = string[:string.index('World')]\nsub_string_before_last = string[:string.rindex('World')]\n\nsub_string_after = string[string.index('Hello') + len('Hello'):]\nsub_string_after_last = string[string.rindex('Hello') + len('Hello'):]\n</code></pre> <pre><code>let subString = string.substring(start, end);\n\nlet subStringBefore = string.substring(0, string.indexOf('World'));\nlet subStringBeforeLast = string.substring(0, string.lastIndexOf('World'));\n\nlet subStringAfter = string.substring(string.indexOf('Hello') + 'Hello'.length);\nlet subStringAfterLast = string.substring(string.lastIndexOf('Hello') + 'Hello'.length);\n</code></pre> <pre><code>let subString: string = string.substring(start, end);\n\nlet subStringBefore: string = string.substring(0, string.indexOf('World'));\nlet subStringBeforeLast: string = string.substring(0, string.lastIndexOf('World'));\n\nlet subStringAfter: string = string.substring(string.indexOf('Hello') + 'Hello'.length);\nlet subStringAfterLast: string = string.substring(string.lastIndexOf('Hello') + 'Hello'.length);\n</code></pre>"}]}